#include "classes/paraDroid.h"

#include <utility>

int   collisionLimit;
float collisionCount;

void paraDroid::AddRef ()
{

}

void paraDroid::ReleaseRef ()
{

}

//-------------------------------------------------------------------------------------------------------------
//
// Return the name of a sprite based on its type
int paraDroid::getCurrentMode ()
//-------------------------------------------------------------------------------------------------------------
{
	return currentMode;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return the name of a sprite based on its type
void paraDroid::setCurrentMode (int newCurrentMode)
//-------------------------------------------------------------------------------------------------------------
{
	currentMode = newCurrentMode;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return the name of a sprite based on its type
int paraDroid::getDroidType ()
//-------------------------------------------------------------------------------------------------------------
{
	return droidType;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return the name of a sprite based on its type
void paraDroid::setDroidType (int newDroidType)
//-------------------------------------------------------------------------------------------------------------
{
	droidType = newDroidType;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return if the droid can fire
int paraDroid::getWeaponCanFire ()
//-------------------------------------------------------------------------------------------------------------
{
	return weaponCanFire;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the weapon can fire state
void paraDroid::setWeaponCanFire (int newWeaponCanFire)
//-------------------------------------------------------------------------------------------------------------
{
	weaponCanFire = newWeaponCanFire;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return the droid current health value
int paraDroid::getCurrentHealth ()
//-------------------------------------------------------------------------------------------------------------
{
	return currentHealth;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the new health value
void paraDroid::setCurrentHealth (int newCurrentHealth)
//-------------------------------------------------------------------------------------------------------------
{
	currentHealth = newCurrentHealth;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return if the droid is over a healing tile flag
int paraDroid::getOverHealingTile ()
//-------------------------------------------------------------------------------------------------------------
{
	return overHealingTile;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the over a healing tile flag
void paraDroid::setOverHealingTile (int newOverHealingTile)
//-------------------------------------------------------------------------------------------------------------
{
	overHealingTile = newOverHealingTile;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return if the droid is over a terminal tile flag
int paraDroid::getOverTerminalTile ()
//-------------------------------------------------------------------------------------------------------------
{
	return overTerminalTile;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the over a terminal tile flag
void paraDroid::setOverTerminalTile (int newOverTerminalTile)
//-------------------------------------------------------------------------------------------------------------
{
	overTerminalTile = newOverTerminalTile;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return droid index ( ID )
int paraDroid::getIndex ()
//-------------------------------------------------------------------------------------------------------------
{
	return index;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the droid index value
void paraDroid::setIndex (int newIndex)
//-------------------------------------------------------------------------------------------------------------
{
	index = newIndex;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return droid Liftindex ( ID )
int paraDroid::getLiftIndex ()
//-------------------------------------------------------------------------------------------------------------
{
	return liftIndex;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the droid Liftindex value
void paraDroid::setLiftIndex (int newLiftIndex)
//-------------------------------------------------------------------------------------------------------------
{
	liftIndex = newLiftIndex;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return droid weapon delay value
float paraDroid::getWeaponDelay ()
//-------------------------------------------------------------------------------------------------------------
{
	return weaponDelay;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the droid Liftindex value
void paraDroid::setWeaponDelay (float newWeaponDelay)
//-------------------------------------------------------------------------------------------------------------
{
	weaponDelay = newWeaponDelay;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return droid weapon delay value
float paraDroid::getInfluenceTimeLeft ()
//-------------------------------------------------------------------------------------------------------------
{
	return influenceTimeLeft;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the droid Liftindex value
void paraDroid::setInfluenceTimeLeft (float newInfluenceTimeLeft)
//-------------------------------------------------------------------------------------------------------------
{
	influenceTimeLeft = newInfluenceTimeLeft;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return droid influence fade value
float paraDroid::getInfluenceFade ()
//-------------------------------------------------------------------------------------------------------------
{
	return influenceFade;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the droid influence fade
void paraDroid::setInfluenceFade (float newInfluenceFade)
//-------------------------------------------------------------------------------------------------------------
{
	influenceFade = newInfluenceFade;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set influence time left flag
void paraDroid::setLowInfluenceTimeLeft (float newLowInfluenceTimeLeft)
//-------------------------------------------------------------------------------------------------------------
{
	lowInfluenceTimeleft = newLowInfluenceTimeLeft;
}

//-------------------------------------------------------------------------------------------------------------
//
// Get low influence time left
bool paraDroid::getLowInfluenceTimeLeft()
//-------------------------------------------------------------------------------------------------------------
{
	return lowInfluenceTimeleft;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the flag to indicate player is in transfer mode
void paraDroid::setInTransferMode (float newInTransferMode)
//-------------------------------------------------------------------------------------------------------------
{
	inTransferMode = newInTransferMode;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return if the player is in transfer mode
bool paraDroid::getInTransferMode()
//-------------------------------------------------------------------------------------------------------------
{
	return inTransferMode;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return the droids text name
std::string paraDroid::getDroidName()
{
	return droidName;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the text name for the droid
void paraDroid::setDroidName(std::string newDroidName)
//-------------------------------------------------------------------------------------------------------------
{
	droidName = std::move(newDroidName);
}

//-------------------------------------------------------------------------------------------------------------
//
// Return current velocity value
b2Vec2 paraDroid::getVelocity()
//-------------------------------------------------------------------------------------------------------------
{
	return velocity;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the current velocity value
void paraDroid::setVelocity(b2Vec2 newVelocity)
//-------------------------------------------------------------------------------------------------------------
{
	velocity = newVelocity;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return if the player is over a lift
bool paraDroid::getOverLiftTile()
//-------------------------------------------------------------------------------------------------------------
{
	return overLiftTile;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set flag to indicate player is over a lift tile
void paraDroid::setOverLiftTile(int newOverLiftTile)
//-------------------------------------------------------------------------------------------------------------
{
	overLiftTile = newOverLiftTile;
}

//-------------------------------------------------------------------------------------------------------------
//
// Return the location of the body definition
b2BodyDef *paraDroid::getBodyDef()
//-------------------------------------------------------------------------------------------------------------
{
	return &bodyDef;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the type of body
void paraDroid::setBodyDefType(b2BodyType newBodyType)
//-------------------------------------------------------------------------------------------------------------
{
	bodyDef.type = newBodyType;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the position of the body
void paraDroid::setBodyPosition(b2Vec2 newBodyPosition)
//-------------------------------------------------------------------------------------------------------------
{
	bodyDef.position.Set(newBodyPosition.x, newBodyPosition.y);
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the angle of the body
void paraDroid::setBodyAngle(float newBodyAngle)
//-------------------------------------------------------------------------------------------------------------
{
	bodyDef.angle = newBodyAngle;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the shape radius
void paraDroid::setShapeRadius(float newShapeRadius)
//-------------------------------------------------------------------------------------------------------------
{
	shape.m_radius = newShapeRadius;
}

//-------------------------------------------------------------------------------------------------------------
//
// Set the shapes position
void paraDroid::setShapePosition(b2Vec2 newShapePosition)
//-------------------------------------------------------------------------------------------------------------
{
	shape.m_p.Set(newShapePosition.x, newShapePosition.y);
}

//-------------------------------------------------------------------------------------------------------------
//
// Return location of shape
b2Shape *paraDroid::getShape()
//-------------------------------------------------------------------------------------------------------------
{
	return &shape;
}

//-------------------------------------------------------------------------------------------------------------
//
void paraDroid::setFixtureDefShape(b2Shape *newShape)
//-------------------------------------------------------------------------------------------------------------
{
	fixtureDef.shape = newShape;
}

//-------------------------------------------------------------------------------------------------------------
//
void paraDroid::setFixtureDefDensity(float newDensity)
//-------------------------------------------------------------------------------------------------------------
{
	fixtureDef.density = newDensity;
}

//-------------------------------------------------------------------------------------------------------------
//
void paraDroid::setFixtureRestitution(float newRestitution)
//-------------------------------------------------------------------------------------------------------------
{
	fixtureDef.restitution = newRestitution;
}
//-------------------------------------------------------------------------------------------------------------
//
void paraDroid::setFixtureDefFriction(float newFriction)
//-------------------------------------------------------------------------------------------------------------
{
	fixtureDef.friction = newFriction;
}

//-------------------------------------------------------------------------------------------------------------
//
void paraDroid::setFixtureDefFilterCategoryBits(uint16 newFilterBits)
//-------------------------------------------------------------------------------------------------------------
{
	fixtureDef.filter.categoryBits = newFilterBits;
}

//-------------------------------------------------------------------------------------------------------------
//
void paraDroid::setFixtureDefMaskBits(uint16 newMaskBits)
//-------------------------------------------------------------------------------------------------------------
{
	fixtureDef.filter.maskBits = newMaskBits;
}

//-------------------------------------------------------------------------------------------------------------
//
b2FixtureDef *paraDroid::getFixtureDef()
//-------------------------------------------------------------------------------------------------------------
{
	return &fixtureDef;
}

void paraDroid::setWorldPosInPixels(b2Vec2 newWorldPosInPixels)
{
	worldPosInPixels = newWorldPosInPixels;
}

b2Vec2 paraDroid::getWorldPosInPixels()
{
	return worldPosInPixels;
}

